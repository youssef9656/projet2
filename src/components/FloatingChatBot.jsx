"use client"

import { useState, useEffect } from "react"
import { Modal, Button, Avatar, Space, Tag, message, Card, Typography } from "antd"
import {
  RobotOutlined,
  UserOutlined,
  QuestionCircleOutlined,
  SendOutlined,
  ReloadOutlined,
  CloseOutlined,
  MessageOutlined,
} from "@ant-design/icons"
import "./FloatingChatBot.css"

const { Text, Title, Paragraph } = Typography

export default function FloatingChatBot() {
  const [isVisible, setIsVisible] = useState(false)
  const [isMinimized, setIsMinimized] = useState(false)
  const [messages, setMessages] = useState([])
  const [questionsUsed, setQuestionsUsed] = useState(0)
  const [usedQuestions, setUsedQuestions] = useState([])
  const [hasNewMessage, setHasNewMessage] = useState(false)

  useEffect(() => {
    // Animation d'apparition aprÃ¨s 2 secondes
    const timer = setTimeout(() => {
      setHasNewMessage(true)
    }, 2000)

    return () => clearTimeout(timer)
  }, [])

  const predefinedQuestions = [
    {
      id: 1,
      question: "Quels sont vos domaines d'expertise ?",
      answer:
        "Nos domaines d'expertise incluent :\nâ€¢ DÃ©veloppement de systÃ¨mes de formation professionnelle\nâ€¢ Insertion professionnelle et emploi\nâ€¢ Conseil en structuration d'entreprise\nâ€¢ Formation selon l'Approche par CompÃ©tences (APC)\n\nNous intervenons dans plus de 15 pays avec une Ã©quipe de 200+ experts.",
    },
    {
      id: 2,
      question: "Comment puis-je obtenir un devis ?",
      answer:
        "Pour obtenir un devis personnalisÃ© :\nâ€¢ Contactez-nous via notre formulaire de contact\nâ€¢ Appelez-nous au [Votre numÃ©ro]\nâ€¢ Envoyez-nous un email Ã  [votre@email.com]\n\nNous vous rÃ©pondrons sous 24h avec une proposition adaptÃ©e Ã  vos besoins spÃ©cifiques.",
    },
    {
      id: 3,
      question: "Quels sont vos tarifs ?",
      answer:
        "Nos tarifs varient selon :\nâ€¢ La complexitÃ© du projet\nâ€¢ La durÃ©e de la mission\nâ€¢ Le nombre de bÃ©nÃ©ficiaires\nâ€¢ La zone gÃ©ographique\n\nNous proposons toujours une consultation gratuite pour Ã©valuer vos besoins et vous fournir un devis dÃ©taillÃ©.",
    },
    {
      id: 4,
      question: "Dans quels pays intervenez-vous ?",
      answer:
        "Nous intervenons dans plus de 15 pays, principalement :\nâ€¢ Afrique de l'Ouest (SÃ©nÃ©gal, Mali, Burkina Faso, etc.)\nâ€¢ Afrique Centrale (Cameroun, Tchad, etc.)\nâ€¢ Maghreb (Maroc, Tunisie, etc.)\n\nNous avons Ã©galement des partenariats en Europe et pouvons Ã©tendre nos services selon vos besoins.",
    },
    {
      id: 5,
      question: "Quelle est votre expÃ©rience ?",
      answer:
        "Notre expÃ©rience :\nâ€¢ 30+ annÃ©es dans la formation professionnelle\nâ€¢ 500+ projets rÃ©alisÃ©s avec succÃ¨s\nâ€¢ 26000+ bÃ©nÃ©ficiaires formÃ©s\nâ€¢ 50+ entreprises accompagnÃ©es\nâ€¢ 98% de taux de satisfaction client\n\nNotre fondateur a plus de 30 ans d'expÃ©rience dans le secteur.",
    },
    {
      id: 6,
      question: "Proposez-vous des formations en ligne ?",
      answer:
        "Oui, nous proposons :\nâ€¢ Formations hybrides (prÃ©sentiel + distanciel)\nâ€¢ Plateformes e-learning personnalisÃ©es\nâ€¢ Webinaires et classes virtuelles\nâ€¢ Contenus pÃ©dagogiques digitaux\n\nNous adaptons nos mÃ©thodes aux contraintes technologiques locales.",
    },
    {
      id: 7,
      question: "Comment garantissez-vous la qualitÃ© ?",
      answer:
        "Notre garantie qualitÃ© :\nâ€¢ Certifications internationales respectÃ©es\nâ€¢ Ã‰quipe d'experts qualifiÃ©s\nâ€¢ Suivi et Ã©valuation continus\nâ€¢ MÃ©thodologies Ã©prouvÃ©es\nâ€¢ Support post-formation\n\nNous nous engageons sur des rÃ©sultats mesurables.",
    },
    {
      id: 8,
      question: "Quels sont vos dÃ©lais d'intervention ?",
      answer:
        "Nos dÃ©lais typiques :\nâ€¢ Consultation initiale : 24-48h\nâ€¢ Proposition dÃ©taillÃ©e : 5-7 jours\nâ€¢ DÃ©marrage projet : 2-4 semaines\nâ€¢ Formations courtes : 1-2 semaines\nâ€¢ Projets complexes : selon envergure\n\nNous nous adaptons Ã  vos urgences si nÃ©cessaire.",
    },
  ]

  const openChat = () => {
    setIsVisible(true)
    setHasNewMessage(false)
    if (messages.length === 0) {
      setMessages([
        {
          id: 1,
          type: "bot",
          content:
            "ðŸ‘‹ Bonjour ! Je suis l'assistant virtuel IFPE. Je peux rÃ©pondre Ã  vos questions sur nos services. Vous avez droit Ã  5 questions maximum. Choisissez une question ci-dessous :",
          timestamp: new Date(),
        },
      ])
    }
  }

  const closeChat = () => {
    setIsVisible(false)
  }

  const minimizeChat = () => {
    setIsMinimized(!isMinimized)
  }

  const handleQuestionClick = (questionObj) => {
    if (questionsUsed >= 5) {
      message.warning("Vous avez atteint la limite de 5 questions. Contactez-nous pour plus d'informations.")
      return
    }

    if (usedQuestions.includes(questionObj.id)) {
      message.info("Vous avez dÃ©jÃ  posÃ© cette question.")
      return
    }

    // Ajouter la question de l'utilisateur
    const userMessage = {
      id: messages.length + 1,
      type: "user",
      content: questionObj.question,
      timestamp: new Date(),
    }

    // Ajouter la rÃ©ponse du bot aprÃ¨s un dÃ©lai
    setTimeout(() => {
      const botMessage = {
        id: messages.length + 2,
        type: "bot",
        content: questionObj.answer,
        timestamp: new Date(),
      }

      setMessages((prev) => [...prev, userMessage, botMessage])
      setQuestionsUsed((prev) => prev + 1)
      setUsedQuestions((prev) => [...prev, questionObj.id])
    }, 500)

    setMessages((prev) => [...prev, userMessage])
  }

  const resetChat = () => {
    setMessages([
      {
        id: 1,
        type: "bot",
        content:
          "ðŸ‘‹ Chat rÃ©initialisÃ© ! Je peux rÃ©pondre Ã  vos questions sur nos services. Vous avez droit Ã  5 nouvelles questions. Choisissez une question ci-dessous :",
        timestamp: new Date(),
      },
    ])
    setQuestionsUsed(0)
    setUsedQuestions([])
  }

  const availableQuestions = predefinedQuestions.filter((q) => !usedQuestions.includes(q.id))

  return (
    <>
      {/* Floating Chat Button */}
      <div className={`floating-chat-button ${hasNewMessage ? "has-notification" : ""}`} onClick={openChat}>
        <Avatar
          size={56}
          style={{
            backgroundColor: "#0056b3",
            cursor: "pointer",
            boxShadow: "0 4px 20px rgba(0, 86, 179, 0.3)",
          }}
          icon={<RobotOutlined style={{ fontSize: "28px" }} />}
          className="floating-avatar"
        />
        {hasNewMessage && <div className="notification-dot"></div>}
        <div className="chat-tooltip">ðŸ’¬ Besoin d'aide ? Cliquez ici !</div>
      </div>

      {/* Chat Modal */}
      <Modal
        title={null}
        open={isVisible}
        onCancel={closeChat}
        footer={null}
        width={400}
        className="floating-chat-modal"
        style={{ top: 20 }}
        maskClosable={false}
        closable={false}
      >
        <div className="floating-chat-container">
          {/* Chat Header */}
          <div className="floating-chat-header">
            <Space>
              <Avatar
                size={32}
                style={{ backgroundColor: "#0056b3" }}
                icon={<RobotOutlined />}
                className="pulse-animation"
              />
              <div>
                <Text strong style={{ color: "#0056b3" }}>
                  Assistant IFPE
                </Text>
                <br />
                <Text type="secondary" style={{ fontSize: "11px" }}>
                  En ligne â€¢ RÃ©pond instantanÃ©ment
                </Text>
              </div>
            </Space>
            <Space>
              <Tag color={questionsUsed >= 5 ? "red" : "blue"} style={{ fontSize: "10px" }}>
                {questionsUsed}/5
              </Tag>
              <Button
                type="text"
                size="small"
                icon={<ReloadOutlined />}
                onClick={resetChat}
                title="RÃ©initialiser"
                style={{ color: "#0056b3" }}
              />
              <Button
                type="text"
                size="small"
                icon={isMinimized ? <MessageOutlined /> : <CloseOutlined />}
                onClick={isMinimized ? minimizeChat : closeChat}
                title={isMinimized ? "Agrandir" : "Fermer"}
                style={{ color: "#0056b3" }}
              />
            </Space>
          </div>

          {!isMinimized && (
            <>
              {/* Messages Area */}
              <div className="floating-messages-area">
                {messages.map((message) => (
                  <div key={message.id} className={`floating-message ${message.type}-message`}>
                    <div className="floating-message-content">
                      <Avatar
                        size={24}
                        style={{
                          backgroundColor: message.type === "bot" ? "#0056b3" : "#3498db",
                        }}
                        icon={message.type === "bot" ? <RobotOutlined /> : <UserOutlined />}
                      />
                      <div className="floating-message-bubble">
                        <div className="floating-message-text">{message.content}</div>
                        <div className="floating-message-time">
                          {message.timestamp.toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" })}
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>

              {/* Questions Buttons */}
              {questionsUsed < 5 && availableQuestions.length > 0 && (
                <div className="floating-questions-section">
                  <div className="floating-questions-header">
                    <QuestionCircleOutlined style={{ color: "#0056b3", marginRight: "6px", fontSize: "12px" }} />
                    <Text strong style={{ color: "#0056b3", fontSize: "12px" }}>
                      Questions disponibles :
                    </Text>
                  </div>
                  <div className="floating-questions-list">
                    {availableQuestions.slice(0, 4).map((questionObj) => (
                      <Button
                        key={questionObj.id}
                        size="small"
                        className="floating-question-button"
                        onClick={() => handleQuestionClick(questionObj)}
                        icon={<SendOutlined style={{ fontSize: "10px" }} />}
                      >
                        {questionObj.question}
                      </Button>
                    ))}
                  </div>
                </div>
              )}

              {/* Limit Reached Message */}
              {questionsUsed >= 5 && (
                <div className="floating-limit-reached">
                  <div style={{ textAlign: "center", padding: "16px" }}>
                    <RobotOutlined style={{ fontSize: "32px", color: "#0056b3", marginBottom: "8px" }} />
                    <Text strong style={{ color: "#0056b3", display: "block", marginBottom: "8px" }}>
                      Limite atteinte !
                    </Text>
                    <Text style={{ fontSize: "12px", marginBottom: "12px", display: "block" }}>
                      Contactez-nous pour plus d'informations.
                    </Text>
                    <Space>
                      <Button size="small" type="primary" style={{ background: "#0056b3", fontSize: "11px" }}>
                        Nous contacter
                      </Button>
                      <Button size="small" onClick={resetChat} icon={<ReloadOutlined />} style={{ fontSize: "11px" }}>
                        Nouveau chat
                      </Button>
                    </Space>
                  </div>
                </div>
              )}
            </>
          )}

          {isMinimized && (
            <div className="minimized-content">
              <Text style={{ fontSize: "12px", color: "#666" }}>Chat rÃ©duit - Cliquez pour agrandir</Text>
            </div>
          )}
        </div>
      </Modal>
    </>
  )
}
